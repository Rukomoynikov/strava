c
JSON.parse(response.body)
response.body
response
c
response
c
pp response
response
l
ls
c
User::Credential.first.delete
User::Credential.count
User::Credential
UserCredential
c
@current_user.access_token
c
@current_user.access_token
c
decoded_id
token_present?
c
body
body, = JWT.decode(token, SECRET, true, algorithm: 'HS256')
JWT.decode(token, SECRET, true, algorithm: 'HS256')
token
c
JWT.decode(token, SECRET, true, algorithm: 'HS256')
token
c
cookies.signed[:user_id].value
cookies.signed[:user_id]
cookies
c
a.success?
a.result
a = Users::AuthenticateUserCommand.call(response["athlete"]["id"])
Users::AuthenticateUserCommand.call(response["athlete"]["id"])
response["athlete"]["id"]
token_command.result
      cookies[:user_id] = {
        value: token_command.result, 
        expires: 30.days,
        httponly: true
      }
cookies[:user_id]
cookies
c
cookies[:user_id]
c
cookies[:user_id]
c
cookies
c
cookies
cookies.signed[:user]
c
cookies.signed[:user]
c
token_present?
c
token_present?
c
cookies.signed_or_encrypted[:user_id]
a
a = cookies.signed_or_encrypted[:user_id]
cookies.signed_or_encrypted[:user_id]
cookies.signed_or_encrypted
cookies.signed['user_id']
cookies.signed[:user_id]
cookies.signed.methods
cookies.signed
c
token_present?
c
cookies.signed[:user_id]
cookies[:user_id]
cookies
l
where
whereami
ls
cookies.signed[:user_id]
cookies.signed.class.ancestors
cookies.signed.ancestors
cookies.signed.class
cookies.signed.keys
cookies.signed
cookies
c
@headers.keys
@headers
@cookies_user
@cookies
token_present?
c
cookies.signed[:user_id] = {
        value: token_command.result, expires: 30.days
      }
cookies
token_command.success?
token_command
c
@cookies_user
@headers
params[:headers]
headers
token
token_present?
c
response["athlete"]["id"]
response["athlete"]
response
continue
